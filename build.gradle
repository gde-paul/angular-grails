import org.grails.gradle.plugin.tasks.GrailsTask

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'org.grails:grails-gradle-plugin:2.1.0'
		classpath 'com.moowork.gradle:gradle-node-plugin:0.6'
	}
}

project.ext {
	warFile = file('angular-grails.war')
	jasmineDependencies = ['karma', 'karma-jasmine@2_0', 'karma-chrome-launcher']
	karmaExec = file('node_modules/karma/bin/karma')
	karmaConfig = 'test/js/karma.conf.js'
}

apply plugin: 'grails'
apply plugin: 'com.moowork.node'

repositories {
	grails.central()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

grails {
	grailsVersion = '2.4.3'
	groovyVersion = '2.3.6'
}

node {
	version = '0.11.13'
	distBaseUrl = 'http://nodejs.org/dist'
	download = true
	workDir = file("${project.buildDir}/nodejs")
}

clean {
	delete warFile
	delete file('node_modules')
}

war {
	outputFile = warFile
	env = 'production'
}

task debug(type: GrailsTask) {
        command = 'run-app'
        jvmOptions {
                jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,address=5005'
        }
}

tasks.withType(GrailsTask) {
	jvmOptions {
		minHeapSize = '1g'
		maxHeapSize = '1g'
		jvmArgs "-XX:MaxPermSize=512m" 
	}
}

task setupJasmine(type: NpmTask) {
	outputs.dir file('node_modules')
	args = ['install'] + jasmineDependencies
}

task jasmineRun(type: NodeTask, dependsOn: 'setupJasmine') {
	script = karmaExec
	args = ['start', karmaConfig, '--single-run']
}

task jasmineWatch(type: NodeTask, dependsOn: 'setupJasmine') {
        script = karmaExec
        args = ['start', karmaConfig]
}

test.dependsOn jasmineRun

task ngGenerate(type: AngularGenerateTask) {
	baseModule = project.angularModule
	group = project.group
	moduleName = project.hasProperty('ngModule') ? ngModule : null
}

dependencies {
	springloaded 'org.springframework:springloaded:1.1.5.RELEASE@jar'

  	String gebVersion = '0.9.2'
	String seleniumVersion = '2.42.2'

	test "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
	test "org.gebish:geb-spock:$gebVersion"
	test "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

	def plugins = [
		[name: 'tomcat', version: '7.0.55', scope: 'bootstrap'],
		[name: 'scaffolding', version: '2.1.2'],
		[name: 'cache', version: '1.1.6'],
		[name: 'asset-pipeline', version: '1.9.9'],
		[name: 'fields', version: '1.4'],
		[name: 'sass-asset-pipeline', version: '1.9.0'],
		[name: 'angular-template-asset-pipeline', version: '1.3.0'],
		[name: 'angular-annotate-asset-pipeline', version: '1.1.1'],
		[name: 'geb', version: gebVersion, scope: 'test']
	]

	plugins.each { plugin ->
		String scope = plugin.scope ?: 'compile'
		owner."$scope" "org.grails.plugins:${plugin.name}:${plugin.version}"
	}
	
	runtime('org.grails.plugins:hibernate4:4.1.11.7') {
    		exclude module: 'xml-apis'
	}
}


class AngularGenerateTask extends DefaultTask {	
	private String fullModule
	private String modulePath
    private String resourceName
	private String jsRoot

	String baseModule
	String moduleName
	String group

	@TaskAction
	void generate() {
		moduleName = formatModuleName(moduleName)
		fullModule = "${baseModule}.${moduleName}"
		modulePath = findModulePath(fullModule)
        resourceName = moduleName[0].toUpperCase() + moduleName.substring(1)

        jsRoot = "grails-app/assets/javascripts"

		createModule()
		createTemplates()		
		createApp()
		setUrlMappings()
	}

	private String findModulePath(module) {
		String path = module.replace('.', '/')
		path = path.replaceAll(/([A-Z])/,/-$1/).toLowerCase().replaceAll(/^-/,'')
		path.replaceAll(/\/-/, '/') + '/'
	}

	private String formatModuleName(module) {
		module ? module[0].toLowerCase() + module.substring(1) : ''
	}

	def createModule() {
		String defaultResource = "${resourceName}Resource"
		String resourceUrl = "/api/${moduleName}"	
		String destination = "${jsRoot}/${modulePath}"

		def props = [
			resourceName: resourceName,
			defaultResource: defaultResource,
            moduleName: fullModule,
            modulePath: modulePath,
            baseModule: baseModule,
            resourceUrl: resourceUrl
		]

		project.copy {
			from 'src/templates/angular/javascript'
			include '*.js'
			into destination
			expand(	props )
		}
	}

	def createTemplates() {
        String destination = "${jsRoot}/templates/${modulePath}"
        def props = [resourceName: resourceName]

		project.copy {
  			from 'src/templates/angular/templates'
            include '*.*'
            into destination
            expand (props)
		}
	}

	def createApp() {
		def viewProps = [fullModule: fullModule, modulePath: modulePath]
		String fileName = "${moduleName}.gsp"

		project.copy {
			from 'src/templates/angular/page.gsp'
			into 'grails-app/views/'
			rename { fileName }
			expand ( viewProps )
		}

        String groupPath = group.replace('.', '/') + '/'
        String controllerDestination = "grails-app/controllers/${groupPath}/"
        String controllerFileName = "${resourceName}Controller.groovy"

        def controllerProps = [group: group, resourceName: resourceName]

		project.copy {
			from 'src/templates/angular/Controller.groovy'
			into controllerDestination
            rename { controllerFileName }
            expand ( controllerProps )
		}
	}

	def setUrlMappings() {
		String pageMapping = "'/${moduleName}'(view: '${moduleName}')"
		String resourceMapping = "'/api/${moduleName}'(resources: '${moduleName}')"
		String indent = "\t" * 2
		String urlMapping = "\n${indent}${pageMapping}\n${indent}${resourceMapping}\n\n${indent}"

		def mappingFile = project.file('grails-app/conf/UrlMappings.groovy')
		
		if (!mappingFile.text.contains(urlMapping)) {
            mappingFile.text = mappingFile.text.replaceAll(/(mappings\s*=\s*\{\s*\n*)/, "\$1${urlMapping}")
		}
	}
}
